function Update-User{
<#
.EXAMPLE
    Get-ADGroup -SearchBase '<OU Path>' -Filter * |
        where name -like 7*_cs* |
        select name |
        Update-User -csv "..\DL-Users.csv"

    Get a list of all classes from the AD to then update group memberships of
.EXAMPLE
    Update-DLUser -class 9C_Cs2 -CSV 'N:\Downloads\Dynamic Learning-Users.csv'

    Get warned if users have been found in the AD group but are missing from the Dynamic Learning users list.

    <= In ADGroup, => in DLGroup. Missing for: 9C_Cs2

    InputObject SideIndicator
    ----------- -------------
    00SurnameI   <=
.EXAMPLE
    get-adgroup -SearchBase 'OU=Class Groups,...' -Filter * | where name -match 'cs' | where name -NotLike '11*' | sort | select name |Update-DLUser -CSV 'N:\Dynamic Learning-Users-2018-9-11-15756738.csv' | convertto-csv -NoTypeInformation | out-file n:\DLWithGroups.csv

    Do all computer science groups, but not year 11.
#>
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$true,
               ValueFromPipeline=$true,
               ValueFromPipelineByPropertyName=$true,
               Position=0)]
    [Alias('Name')]
    [string[]]
    $class

    , # Data file
    [Parameter(Mandatory=$true,
               ValueFromPipeline=$true,
               ValueFromPipelineByPropertyName=$true,
               Position=1)]
    [string]
    $CSV
)
    Begin{
        $c = Import-Csv $csv
    }
    Process{
        forEach($group in $class){
            Write-Verbose "Start to set members for group: $group"
            $adgroup = $group | Get-ADGroupMember | Select-Object -ExpandProperty samaccountname

            $DLGroup = $c | Where-Object '4 - User name' -in $adgroup

            # Check
            $a = ($adgroup | Measure-Object).Count
            $b = ($DLGroup | Measure-Object).Count
            if($a -ne $b){
                Write-Output "<= In ADGroup, => in DLGroup. Missing for: $group"
                Compare-object $adgroup $DLGroup.'4 - User name'
            } else {
                Write-Verbose "Group has $a members in both AD and DL"
            }

            # Mark the use record as edited for re-upload
            $DLGroup | Foreach-Object {
                if($_.'1 - Action' -ne 'A' ){
                    $_.'1 - Action' = 'E'
                } else {
                    Write-Verbose "Not changing Add action to Edit."
                }
            }

            # Clear all group memberships
            $DLGroup | Foreach-Object {
                $_.psobject.properties | Foreach-Object {
                    if($_.value -eq 'Yes'){
                        $_.Value = 'No'
                    }
                }
            }

            # Add to correct group
            [switch]$added = $False
            $DLGroup | Foreach-Object {
                $_.psobject.properties | Foreach-Object {
                    Write-Verbose "`tCheck property: $($_.Name)"
                    Write-Verbose "`tIs like Value: $group"
                    Write-Verbose "`t`tResults in value: $($_.Name -Like "*$group*")"
                    if($_.Name -Like "*$group*"){
                        $_.Value = 'Yes'
                        $added = $True
                    }
                }
            }
            if(-not $added){
                Write-Warning "$group DL Group not found to add membership"
            }

            # Add to correct Year Group
            [switch]$correctYear = $False
            $DLGroup | foreach {
                $intake = [int]$_.'4 - User name'.Substring(0,2)
                $yeargroup = @('Year 7','Year 8','Year 9','Year 10','Year 11')[(get-date).year - ($intake + 2000) -1]
                $_.psobject.properties | foreach{
                    if($_.Name -Like "$yeargroup |*"){
                        $_.Value = 'Yes'
                        $correctYear = $True
                    }
                }
            }
            if($correctYear -and -not $added){
                Write-Warning "$group DL Group not found to add membership"
            }

            Write-Output $DLGroup
        }
    }
    End{

    }
}

function Format-ForHumans{
    Param(
        # CSV Datasource
        [Parameter(Position=0)]
        $CSV
    )
    Process{
        import-csv $CSV |
            select-Object @(
                @{n='User Name';e={$_.'4 - User Name'}}
                @{n='Password'; e={$_.'5 - Password'}}
                @{n='Name';     e={$_.'7 - First name'}}
                @{n='Surname';  e={$_.'9 - Last Name'}}
            )
    }
}

function Add-Group{
    <#
    .SYNOPSIS
        Add a group to Dynamic Learning
    .DESCRIPTION
        DL Group name pattern is generated by Dynamic Learning as "<Name Chosen> | <User Name>" for the
        account logged on to Dynamic Learning.
        For small numbers of groups it may be best to create on LD first to avoid manual errors.

        This Append another column for the user import to Dynamic Learning which can create groups.
        Alternatively it can add the group as a property to piped members for later export to CSV.
    .NOTES
        This may note work as intended because DL will look for "1 - Action" to be "E" for edit on the user entry in order to set the groups
        If so it needs testing if every user in the CSV needs E to add a "No" group, our only "yes" users.

        May just simply have to do all add/remove groups on DL before editing users.
    #>
    param(
        # AD User to add group property to
        [Parameter(Position=0,
                   ParameterSetName="User",
                   ValueFromPipeline,
                   ValueFromPipelineByPropertyName)]
        $User

        , # AD User to add group property to
        [Parameter(Position=0,
                   ParameterSetName="Dataset",
                   ValueFromPipeline)]
        $CSV

        , # AD Class name
        [string]
        $Class

        , # DL Group name, pattern is generated by DL as "<Name Chosen> | <User Name>". .
        [string]
        $DLUserName = "MR S Moss"
    )
    Process{
        switch($PSCmdlet.ParameterSetName){
            'User' {
                $User | Add-Member -MemberType NoteProperty -Name "$Class | $DLUserName" -Value 'Yes' -PassThru -force
            }
            'Dataset' {
                $Original = Import-CSV $csv
                $Original | Add-Member -NotePropertyName "$Class | $DLUserName" -NotePropertyValue 'No'
                $Original | convertto-csv -NoTypeInformation | Out-File -Encoding utf8 -FilePath $csv -Force
            }
        }
    }
}

function Get-Group{
    <#
    .SYNOPSIS
        Get Dynamic Learning groups
    .DESCRIPTION
        The Dynamic Learning User Export adds a column for each group on the system that the users then have yes/no filled in to assign membership

        This function lists all the groups DL already has created.
    .EXAMPLE
        PS C:\> Get-DLGroup 'N:\Downloads\Dynamic Learning-Users-.csv'
        Show all groups already present from Dynamic Learning export.

        10B_Cs1 | My User Account
        10D_Cs1 | My User Account
        11A_It1 | My User Account
        11B_cs1 | My User Account
        11B_It1 | My User Account
        11C_It1 | My User Account
        ...
    .INPUTS
        Inputs (if any)
    .OUTPUTS
        Output (if any)
    .NOTES
        General notes
    #>
    Param(
        $Path
    )
    $DLHeaders = @(
        "1 - Action",
        "2 - User ID - do not edit (DL use only)",
        "3 - User type",
        "4 - User name",
        "5 - Password",
        "6 - Title",
        "7 - First name",
        "8 - Middle name",
        "9 - Last name",
        "10 - DOB",
        "11 - Sex",
        "12 - Upn",
        "13 - Email"
    )

    (Get-content $path -TotalCount 1).replace('"','') -split ',' | where {$_ -notin $DLHeaders}
}
